//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <22 23>;
        };

        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <24 23>;
        };

        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <22 24>;
        };

        bt_activate {
            bindings = <&long_sticky_layer 3>;
            key-positions = <36 37 32 33>;
        };

        copy_link {
            bindings = <&kp LS(LG(C))>;
            key-positions = <22 23 24>;
        };

        prev_tab {
            bindings = <&kp LG(LEFT_BRACE)>;
            key-positions = <16 17>;
        };

        next_tab {
            bindings = <&kp LG(RIGHT_BRACE)>;
            key-positions = <18 19>;
        };

        go_back {
            bindings = <&kp LG(LEFT_BRACKET)>;
            key-positions = <27 28>;
        };

        go_next {
            bindings = <&kp LG(RIGHT_BRACKET)>;
            key-positions = <29 30>;
        };

        homerow_activate {
            bindings = <&kp LG(LA(LC(LS(G))))>;
            key-positions = <34 14>;
        };

        dw {
            bindings = <&delete_word_vim>;
            key-positions = <2 1>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };

        delete_word_vim: delete_word_vim {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp D>, <&macro_tap>, <&kp W>;

            label = "DELETE_WORD_VIM";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <10 11 12 13>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <16 17 18 19>;
        };

        long_sticky_layer: long_sticky_layer {
            compatible = "zmk,behavior-sticky-key";
            label = "LONG_STICKY_LAYER";
            bindings = <&sl>;
            #binding-cells = <1>;
            release-after-ms = <60000>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
           &kp Q         &kp W        &kp E           &kp R      &kp T                       &kp Y          &kp U      &kp I        &kp O        &kp P
           &hml LCTRL A  &hml LALT S  &hml LGUI D     &kp F      &kp G                       &kp H          &kp J      &hmr RGUI K  &hmr RALT L  &hmr RCTRL SEMI
&lt 1 ESC  &mt LSHIFT Z  &kp X        &kp C           &kp V      &kp B                       &kp N          &kp M      &kp COMMA    &kp DOT      &mt RIGHT_SHIFT FSLH  &lt 1 SQT
                                      &kp LEFT_SHIFT  &kp SPACE  &mt LS(LC(LEFT_ALT)) TAB    &kp BACKSPACE  &kp ENTER  &mo 2
            >;
        };

        sym {
            bindings = <
        &kp GRAVE  &kp UNDERSCORE  &kp LPAR  &kp RIGHT_PARENTHESIS  &kp PLUS            &key_repeat  &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP  &trans
        &kp TILDE  &kp MINUS       &kp LBRC  &kp RIGHT_BRACE        &kp EQUAL           &kp LEFT     &kp DOWN      &kp UP            &kp RIGHT     &trans
&trans  &kp PIPE   &kp LESS_THAN   &kp LBKT  &kp RIGHT_BRACKET      &kp GREATER_THAN    &trans       &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &kp BACKSLASH  &trans
                                   &trans    &kp LALT               &kp LGUI            &trans       &trans        &trans
            >;
        };

        nums {
            bindings = <
           &kp EXCL      &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT     &kp CARET     &kp AMPS  &kp ASTERISK  &trans  &trans
           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp N7    &kp N8        &kp N9  &kp N0
&kp GRAVE  &trans        &trans        &trans        &trans        &trans          &trans        &trans    &trans        &trans  &trans  &trans
                                       &trans        &trans        &trans          &trans        &trans    &trans
            >;
        };

        bt_sys {
            bindings = <
        &trans        &trans        &trans        &trans        &trans          &sys_reset  &trans      &trans      &trans  &trans
        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans      &bt BT_NXT  &bt BT_PRV  &trans  &bt BT_CLR_ALL
&trans  &trans        &trans        &trans        &trans        &trans          &trans      &trans      &trans      &trans  &trans          &bt BT_CLR
                                    &trans        &trans        &trans          &trans      &trans      &trans
            >;
        };
    };
};
